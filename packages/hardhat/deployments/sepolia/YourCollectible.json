{
  "address": "0x53CfdEA12Fb50a8a6dF439788361f7F38341B23d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startingBid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "highestBidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "highestBid",
          "type": "uint256"
        }
      ],
      "name": "AuctionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newListingFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "ListingFeePercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "NftUnlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "RoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LISTING_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllListedNfts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "tokenUri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct YourCollectible.NftItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getHighestBidder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNftItem",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "tokenUri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct YourCollectible.NftItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOngoingAuctions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startingBid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBid",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "highestBidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct YourCollectible.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTradeHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "royalty",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct YourCollectible.TradeHistory[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "mintItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "placeNftOnSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "purchaseNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unlistNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newListingFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "updateListingFeePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7ad9356024eb057e06db2668f6319c81d41e401aa6ac54ed41910eb8a597fa6",
  "receipt": {
    "to": null,
    "from": "0xCF3E0f52547A6eC17902E0FFc71bf12383B12c3f",
    "contractAddress": "0x53CfdEA12Fb50a8a6dF439788361f7F38341B23d",
    "transactionIndex": 64,
    "gasUsed": "3547942",
    "logsBloom": "0x
    "blockHash": "0x20a110a3a265f81c5bb02f11d938e9da07197921e6c0b206a0ab90ec30619599",
    "transactionHash": "0xb7ad9356024eb057e06db2668f6319c81d41e401aa6ac54ed41910eb8a597fa6",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 7234739,
        "transactionHash": "0xb7ad9356024eb057e06db2668f6319c81d41e401aa6ac54ed41910eb8a597fa6",
        "address": "0x53CfdEA12Fb50a8a6dF439788361f7F38341B23d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cf3e0f52547a6ec17902e0ffc71bf12383b12c3f"
        ],
        "data": "0x",
        "logIndex": 180,
        "blockHash": "0x20a110a3a265f81c5bb02f11d938e9da07197921e6c0b206a0ab90ec30619599"
      }
    ],
    "blockNumber": 7234739,
    "cumulativeGasUsed": "11030054",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a0a2450169a176536d0b06a544d73fed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newListingFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ListingFeePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"NftUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"RoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LISTING_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllListedNfts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct YourCollectible.NftItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHighestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNftItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct YourCollectible.NftItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOngoingAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct YourCollectible.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTradeHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct YourCollectible.TradeHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"mintItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"placeNftOnSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlistNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newListingFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateListingFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"createAuction(uint256,uint256,uint256)\":{\"details\":\"\\u521b\\u5efa\\u62cd\\u5356\",\"params\":{\"duration\":\"\\u62cd\\u5356\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\",\"startingBid\":\"\\u62cd\\u5356\\u7684\\u8d77\\u59cb\\u4ef7\\u683c\",\"tokenId\":\"NFT\\u7684Token ID\"}},\"endAuction(uint256)\":{\"details\":\"\\u7ed3\\u675f\\u62cd\\u5356   \",\"params\":{\"tokenId\":\"NFT\\u7684Token ID\"}},\"getAllListedNfts()\":{\"details\":\"\\u83b7\\u53d6\\u6240\\u6709\\u4e0a\\u67b6\\u7684NFT\",\"returns\":{\"_0\":\"An array of NftItem structs\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getCurrentBid(uint256)\":{\"details\":\"\\u83b7\\u53d6NFT\\u7684\\u5f53\\u524d\\u51fa\\u4ef7\",\"params\":{\"tokenId\":\"NFT\\u7684Token ID\"}},\"getHighestBidder(uint256)\":{\"details\":\"\\u83b7\\u53d6NFT\\u7684\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\",\"params\":{\"tokenId\":\"NFT\\u7684Token ID\"}},\"getNftItem(uint256)\":{\"details\":\"\\u83b7\\u53d6NftItem\\u4fe1\\u606f\",\"params\":{\"tokenId\":\"\\u8981\\u67e5\\u8be2\\u7684NFT\\u7684Token ID\"},\"returns\":{\"_0\":\"NftItem\\u7ed3\\u6784\\u4f53\"}},\"getTradeHistory(uint256)\":{\"details\":\"\\u67e5\\u8be2\\u6307\\u5b9a tokenId \\u7684\\u4ea4\\u6613\\u5386\\u53f2\",\"params\":{\"tokenId\":\"NFT\\u7684Token ID\"},\"returns\":{\"_0\":\"TradeHistory[] \\u4ea4\\u6613\\u5386\\u53f2\\u7684\\u6570\\u7ec4\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintItem(address,string,uint96)\":{\"details\":\"\\u94f8\\u9020\\u65b0\\u7684NFT\\u5e76\\u8bbe\\u7f6e\\u7248\\u7a0e\\uff0c\\u94f8\\u9020\\u8005\\u4e3a\\u7248\\u7a0e\\u63a5\\u6536\\u8005\",\"params\":{\"feeNumerator\":\"\\u7248\\u7a0e\\u6bd4\\u4f8b\\uff08\\u767e\\u5206\\u6bd4\\u7684\\u5343\\u5206\\u4e4b\\u4e00\\uff09\\uff0c\\u5982500\\u8868\\u793a5%\",\"to\":\"\\u63a5\\u6536\\u8005\\u5730\\u5740\",\"uri\":\"NFT\\u7684\\u5143\\u6570\\u636eURI\"},\"returns\":{\"_0\":\"tokenId \\u65b0\\u94f8\\u9020\\u7684NFT\\u7684Token ID\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"placeBid(uint256)\":{\"details\":\"\\u51fa\\u4ef7\",\"params\":{\"tokenId\":\"NFT\\u7684Token ID\"}},\"placeNftOnSale(uint256,uint256,uint256)\":{\"details\":\"\\u4e0a\\u67b6NFT\\uff0c\\u8bbe\\u7f6e\\u4ef7\\u683c\\u5e76\\u8bb0\\u5f55\\u5356\\u5bb6\\u4fe1\\u606f\",\"params\":{\"duration\":\"\\u4e0a\\u67b6\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\\uff0c0 \\u8868\\u793a\\u65e0\\u9650\\u671f\",\"price\":\"\\u4e0a\\u67b6\\u7684\\u4ef7\\u683c\",\"tokenId\":\"NFT\\u7684Token ID\"}},\"purchaseNft(uint256)\":{\"details\":\"\\u8d2d\\u4e70NFT\\u5e76\\u652f\\u4ed8\\u7248\\u7a0e\",\"params\":{\"tokenId\":\"NFT\\u7684Token ID\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlistNft(uint256)\":{\"details\":\"\\u4ece\\u5e02\\u573a\\u4e2d\\u64a4\\u4e0bNFT\",\"params\":{\"tokenId\":\"NFT\\u7684Token ID\"}},\"updateListingFeePercentage(uint256)\":{\"details\":\"\\u66f4\\u65b0\\u4e0a\\u67b6\\u8d39\\u6bd4\\u4f8b\",\"params\":{\"newListingFeePercentage\":\"\\u65b0\\u7684\\u4e0a\\u67b6\\u8d39\\u7387\\uff08\\u767e\\u5206\\u6bd4\\u7684\\u5343\\u5206\\u4e4b\\u4e00\\uff09\"}},\"withdrawFees()\":{\"details\":\"\\u63d0\\u53d6\\u6536\\u96c6\\u7684\\u4e0a\\u67b6\\u8d39\\u7528\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourCollectible.sol\":\"YourCollectible\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x93d24eea4e6ddbed53ef161567ae62bfd0c3aebb7b48f37e4dbeb7a937108866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/YourCollectible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\"; // \\u7528\\u4e8e\\u7248\\u7a0e\\u652f\\u6301\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract YourCollectible is\\n\\tERC721,\\n\\tERC721Enumerable,\\n\\tERC721URIStorage,\\n\\tERC721Royalty,\\n\\tOwnable,\\n\\tReentrancyGuard\\n{\\n\\tusing Counters for Counters.Counter;\\n\\n\\tCounters.Counter public tokenIdCounter; // \\u7528\\u4e8e\\u81ea\\u52a8\\u751f\\u6210Token ID\\n\\tuint256 public totalFeesCollected; // \\u7d2f\\u8ba1\\u6536\\u53d6\\u7684\\u4e0a\\u67b6\\u8d39\\u7528\\n\\n\\t// \\u5b9a\\u4e49NFT\\u9879\\u7684\\u7ed3\\u6784\\u4f53\\n\\tstruct NftItem {\\n\\t\\tuint256 tokenId;\\n\\t\\tuint256 price;\\n\\t\\taddress payable seller;\\n\\t\\tbool isListed;\\n\\t\\tstring tokenUri;\\n\\t\\tuint256 expirationTime; //\\u4e0a\\u67b6\\u5230\\u671f\\u65f6\\u95f4\\uff08UNIX \\u65f6\\u95f4\\u6233\\uff09\\n\\t}\\n\\n\\t// \\u5b9a\\u4e49\\u62cd\\u5356\\u7ed3\\u6784\\u4f53\\n\\tstruct Auction {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress payable seller;\\n\\t\\tuint256 startingBid;\\n\\t\\tuint256 currentBid;\\n\\t\\taddress payable highestBidder;\\n\\t\\tuint256 endTime;\\n\\t\\tbool isActive;\\n\\t}\\n\\n\\tstruct TradeHistory {\\n\\t\\taddress from; // \\u5356\\u5bb6\\u5730\\u5740\\n\\t\\taddress to; // \\u4e70\\u5bb6\\u5730\\u5740\\n\\t\\tuint256 price; // \\u4ea4\\u6613\\u4ef7\\u683c\\n\\t\\tuint256 royalty; // \\u652f\\u4ed8\\u7684\\u7248\\u7a0e\\u91d1\\u989d\\n\\t\\tuint256 timestamp; // \\u4ea4\\u6613\\u65f6\\u95f4\\u6233\\n\\t}\\n\\n\\t// \\u7528\\u4e8e\\u6620\\u5c04Token ID\\u5230NftItem\\n\\tmapping(uint256 => NftItem) private _idToNftItem;\\n\\t// \\u7528\\u4e8e\\u6620\\u5c04Token ID\\u5230\\u62cd\\u5356\\u4fe1\\u606f\\n\\tmapping(uint256 => Auction) private _idToAuction;\\n\\t// An array to keep track of all auctioned tokens\\n\\tuint256[] private _auctionedTokenIds;\\n\\n\\t// \\u7528\\u4e8e\\u8bb0\\u5f55Token URI\\u662f\\u5426\\u88ab\\u4f7f\\u7528\\u8fc7\\uff0c\\u907f\\u514d\\u91cd\\u590d\\n\\tmapping(string => bool) private _usedTokenURIs;\\n\\t// \\u5217\\u51fa\\u6240\\u6709\\u7684Token ID\\n\\tuint256[] private _listedTokenIds;\\n\\t// \\u7528\\u4e8e\\u8bb0\\u5f55Token ID\\u5230\\u5df2\\u5217\\u51fa\\u7d22\\u5f15\\u7684\\u6620\\u5c04\\n\\tmapping(uint256 => uint256) private _tokenIdToListedIndex;\\n\\t// \\u4ea4\\u6613\\u65f6\\u7684\\u4e0a\\u67b6\\u8d39\\u7387\\uff08\\u4ee5\\u5343\\u5206\\u4e4b\\u4e00\\u8ba1\\u7b97\\uff09\\n\\tuint256 public listingFeePercentage = 250; // 2.5%\\n\\tuint256 public constant MAX_LISTING_FEE_PERCENTAGE = 1000; // \\u6700\\u9ad810%\\n\\t// \\u7528\\u4e8e\\u8bb0\\u5f55\\u6bcf\\u4e2aToken ID\\u7684\\u4ea4\\u6613\\u5386\\u53f2\\u8bb0\\u5f55\\n\\tmapping(uint256 => TradeHistory[]) private _tradeHistories;\\n\\n\\t// \\u5b9a\\u4e49\\u4e8b\\u4ef6\\n\\tevent NftListed(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\taddress indexed seller,\\n\\t\\tuint256 price\\n\\t);\\n\\tevent NftUnlisted(uint256 indexed tokenId, address indexed seller);\\n\\tevent NftPurchased(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\taddress indexed buyer,\\n\\t\\tuint256 price\\n\\t);\\n\\tevent AuctionCreated(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\taddress indexed seller,\\n\\t\\tuint256 startingBid,\\n\\t\\tuint256 endTime\\n\\t);\\n\\tevent BidPlaced(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\taddress indexed bidder,\\n\\t\\tuint256 bidAmount\\n\\t);\\n\\tevent AuctionEnded(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\taddress indexed highestBidder,\\n\\t\\tuint256 highestBid\\n\\t);\\n\\tevent ListingFeePercentageUpdated(uint256 newListingFeePercentage);\\n\\tevent FeesWithdrawn(address indexed owner, uint256 amount);\\n\\tevent FeesReceived(address indexed sender, uint256 amount);\\n\\tevent RoyaltySet(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\taddress indexed receiver,\\n\\t\\tuint96 feeNumerator\\n\\t);\\n\\n\\t// \\u6784\\u9020\\u51fd\\u6570\\uff0c\\u521d\\u59cb\\u5316NFT\\u540d\\u79f0\\u548c\\u7b26\\u53f7\\n\\tconstructor() ERC721(\\\"YourCollectible\\\", \\\"ZJP\\\") {}\\n\\n\\t// \\u8bbe\\u7f6e\\u57fa\\u7840URI\\uff0c\\u8fd4\\u56de\\u6240\\u6709tokenURI\\u7684\\u57fa\\u672c\\u8def\\u5f84\\n\\tfunction _baseURI() internal pure override returns (string memory) {\\n\\t\\treturn \\\"https://lime-random-mite-563.mypinata.cloud/ipfs/\\\";\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u94f8\\u9020\\u65b0\\u7684NFT\\u5e76\\u8bbe\\u7f6e\\u7248\\u7a0e\\uff0c\\u94f8\\u9020\\u8005\\u4e3a\\u7248\\u7a0e\\u63a5\\u6536\\u8005\\n\\t * @param to \\u63a5\\u6536\\u8005\\u5730\\u5740\\n\\t * @param uri NFT\\u7684\\u5143\\u6570\\u636eURI\\n\\t * @param feeNumerator \\u7248\\u7a0e\\u6bd4\\u4f8b\\uff08\\u767e\\u5206\\u6bd4\\u7684\\u5343\\u5206\\u4e4b\\u4e00\\uff09\\uff0c\\u5982500\\u8868\\u793a5%\\n\\t * @return tokenId \\u65b0\\u94f8\\u9020\\u7684NFT\\u7684Token ID\\n\\t */\\n\\tfunction mintItem(\\n\\t\\taddress to,\\n\\t\\tstring memory uri,\\n\\t\\tuint96 feeNumerator\\n\\t) public returns (uint256) {\\n\\t\\ttokenIdCounter.increment();\\n\\t\\tuint256 tokenId = tokenIdCounter.current();\\n\\t\\t_safeMint(to, tokenId);\\n\\t\\t_setTokenURI(tokenId, uri);\\n\\n\\t\\t// \\u94f8\\u9020\\u8005\\u4f5c\\u4e3a\\u7248\\u7a0e\\u63a5\\u6536\\u8005\\n\\t\\t_setTokenRoyalty(tokenId, msg.sender, feeNumerator);\\n\\t\\temit RoyaltySet(tokenId, msg.sender, feeNumerator);\\n\\n\\t\\t// \\u62fc\\u63a5\\u5b8c\\u6574\\u7684 tokenURI\\n\\t\\tstring memory completeTokenURI = string(\\n\\t\\t\\tabi.encodePacked(_baseURI(), uri)\\n\\t\\t);\\n\\n\\t\\t_idToNftItem[tokenId] = NftItem({\\n\\t\\t\\ttokenId: tokenId,\\n\\t\\t\\tprice: 0,\\n\\t\\t\\tseller: payable(address(0)),\\n\\t\\t\\tisListed: false,\\n\\t\\t\\ttokenUri: completeTokenURI,\\n\\t\\t\\texpirationTime: 0 // \\u9ed8\\u8ba4\\u503c\\n\\t\\t});\\n\\n\\t\\temit NftUnlisted(tokenId, address(0));\\n\\t\\treturn tokenId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u4e0a\\u67b6NFT\\uff0c\\u8bbe\\u7f6e\\u4ef7\\u683c\\u5e76\\u8bb0\\u5f55\\u5356\\u5bb6\\u4fe1\\u606f\\n\\t * @param tokenId NFT\\u7684Token ID\\n\\t * @param price \\u4e0a\\u67b6\\u7684\\u4ef7\\u683c\\n\\t * @param duration \\u4e0a\\u67b6\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\\uff0c0 \\u8868\\u793a\\u65e0\\u9650\\u671f\\n\\t */\\n\\tfunction placeNftOnSale(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\tuint256 duration\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\townerOf(tokenId) == msg.sender,\\n\\t\\t\\t\\\"Only the owner can list the NFT\\\"\\n\\t\\t);\\n\\t\\trequire(!_idToNftItem[tokenId].isListed, \\\"NFT is already listed\\\");\\n\\t\\trequire(price > 0, \\\"Price must be greater than zero\\\");\\n\\n\\t\\tuint256 expirationTime = duration == 0 ? 0 : block.timestamp + duration;\\n\\n\\t\\t_idToNftItem[tokenId].price = price;\\n\\t\\t_idToNftItem[tokenId].seller = payable(msg.sender);\\n\\t\\t_idToNftItem[tokenId].isListed = true;\\n\\t\\t_idToNftItem[tokenId].expirationTime = expirationTime;\\n\\n\\t\\t_listedTokenIds.push(tokenId);\\n\\t\\t_tokenIdToListedIndex[tokenId] = _listedTokenIds.length - 1;\\n\\n\\t\\temit NftListed(tokenId, msg.sender, price);\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u521b\\u5efa\\u62cd\\u5356\\n\\t * @param tokenId NFT\\u7684Token ID\\n\\t * @param startingBid \\u62cd\\u5356\\u7684\\u8d77\\u59cb\\u4ef7\\u683c\\n\\t * @param duration \\u62cd\\u5356\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\\n\\t */\\n\\tfunction createAuction(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 startingBid,\\n\\t\\tuint256 duration\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\townerOf(tokenId) == msg.sender,\\n\\t\\t\\t\\\"Only the owner can create an auction\\\"\\n\\t\\t);\\n\\t\\trequire(!_idToAuction[tokenId].isActive, \\\"Auction is already active\\\");\\n\\t\\trequire(startingBid > 0, \\\"Starting bid must be greater than zero\\\");\\n\\n\\t\\tuint256 endTime = block.timestamp + duration;\\n\\n\\t\\t_idToAuction[tokenId] = Auction({\\n\\t\\t\\ttokenId: tokenId,\\n\\t\\t\\tseller: payable(msg.sender),\\n\\t\\t\\tstartingBid: startingBid,\\n\\t\\t\\tcurrentBid: 0,\\n\\t\\t\\thighestBidder: payable(address(0)),\\n\\t\\t\\tendTime: endTime,\\n\\t\\t\\tisActive: true\\n\\t\\t});\\n\\n\\t\\t// Add the token ID to the auctioned list\\n\\t\\t_auctionedTokenIds.push(tokenId);\\n\\n\\t\\temit AuctionCreated(tokenId, msg.sender, startingBid, endTime);\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u51fa\\u4ef7\\n\\t * @param tokenId NFT\\u7684Token ID\\n\\t */\\n\\tfunction placeBid(uint256 tokenId) public payable {\\n\\t\\tAuction storage auction = _idToAuction[tokenId];\\n\\t\\trequire(auction.isActive, \\\"Auction is not active\\\");\\n\\t\\trequire(block.timestamp < auction.endTime, \\\"Auction has ended\\\");\\n\\t\\trequire(\\n\\t\\t\\tmsg.value > auction.currentBid,\\n\\t\\t\\t\\\"Bid must be higher than current bid\\\"\\n\\t\\t);\\n\\n\\t\\t// \\u9000\\u8fd8\\u4e4b\\u524d\\u7684\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\n\\t\\tif (auction.highestBidder != address(0)) {\\n\\t\\t\\tauction.highestBidder.transfer(auction.currentBid);\\n\\t\\t}\\n\\n\\t\\tauction.currentBid = msg.value;\\n\\t\\tauction.highestBidder = payable(msg.sender);\\n\\n\\t\\temit BidPlaced(tokenId, msg.sender, msg.value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u7ed3\\u675f\\u62cd\\u5356\\n\\t *   \\n\\t * @param tokenId NFT\\u7684Token ID\\n\\t */\\n\\tfunction endAuction(uint256 tokenId) public nonReentrant {\\n\\t\\tAuction storage auction = _idToAuction[tokenId];\\n\\n\\t\\t// \\u68c0\\u67e5\\u62cd\\u5356\\u662f\\u5426\\u4ecd\\u5728\\u8fdb\\u884c\\u4e2d\\n\\t\\trequire(auction.isActive, \\\"Auction has already ended\\\");\\n\\n\\t\\t// \\u62cd\\u5356\\u5230\\u671f\\u540e\\uff0c\\u6807\\u8bb0\\u4e3a\\u975e\\u6d3b\\u52a8\\u72b6\\u6001\\n\\t\\tauction.isActive = false;\\n\\n\\t\\tif (auction.highestBidder != address(0)) {\\n\\t\\t\\n\\t\\t\\t// \\u8f6c\\u79fbNFT\\u7ed9\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\n\\t\\t\\t_transfer(auction.seller, auction.highestBidder, tokenId);\\n\\n\\t\\t\\t// \\u5411\\u5356\\u5bb6\\u652f\\u4ed8\\u62cd\\u5356\\u6240\\u5f97\\u91d1\\u989d\\n\\t\\t\\tuint256 finalAmount = auction.currentBid;\\n\\n\\t\\t\\t// \\u5411\\u5356\\u5bb6\\u8f6c\\u8d26\\n\\t\\t\\t(bool sellerPaid, ) = auction.seller.call{ value: finalAmount }(\\\"\\\");\\n\\t\\t\\trequire(sellerPaid, \\\"Seller payment failed\\\");\\n\\n\\t\\t\\temit AuctionEnded(\\n\\t\\t\\t\\ttokenId,\\n\\t\\t\\t\\tauction.highestBidder,\\n\\t\\t\\t\\tauction.currentBid\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\t// \\u6ca1\\u6709\\u6709\\u6548\\u7684\\u51fa\\u4ef7\\u8005\\uff0c\\u62cd\\u5356\\u5931\\u8d25\\uff0c\\u5356\\u5bb6\\u4fdd\\u7559NFT\\n\\t\\t\\temit AuctionEnded(tokenId, address(0), 0);\\n\\t\\t}\\n\\t}\\n\\n\\t// \\u83b7\\u53d6\\u6240\\u6709\\u6b63\\u5728\\u8fdb\\u884c\\u7684\\u62cd\\u5356NFT\\n\\tfunction getOngoingAuctions() external view returns (Auction[] memory) {\\n\\t\\tuint256 totalAuctions = 0;\\n\\n\\t\\t// \\u7edf\\u8ba1\\u6240\\u6709\\u6b63\\u5728\\u8fdb\\u884c\\u7684\\u62cd\\u5356\\n\\t\\tfor (uint256 i = 0; i < _auctionedTokenIds.length; i++) {\\n\\t\\t\\tuint256 tokenId = _auctionedTokenIds[i];\\n\\t\\t\\tAuction storage auction = _idToAuction[tokenId];\\n\\t\\t\\tif (auction.isActive && block.timestamp < auction.endTime) {\\n\\t\\t\\t\\ttotalAuctions++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// \\u521b\\u5efa\\u4e00\\u4e2a\\u6570\\u7ec4\\u6765\\u4fdd\\u5b58\\u6b63\\u5728\\u8fdb\\u884c\\u7684\\u62cd\\u5356NFT\\n\\t\\tAuction[] memory ongoingAuctions = new Auction[](totalAuctions);\\n\\t\\tuint256 index = 0;\\n\\n\\t\\t// \\u5c06\\u7b26\\u5408\\u6761\\u4ef6\\u7684\\u62cd\\u5356\\u52a0\\u5165\\u6570\\u7ec4\\n\\t\\tfor (uint256 i = 0; i < _auctionedTokenIds.length; i++) {\\n\\t\\t\\tuint256 tokenId = _auctionedTokenIds[i];\\n\\t\\t\\tAuction storage auction = _idToAuction[tokenId];\\n\\t\\t\\tif (auction.isActive && block.timestamp < auction.endTime) {\\n\\t\\t\\t\\tongoingAuctions[index] = auction;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn ongoingAuctions;\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u83b7\\u53d6NFT\\u7684\\u5f53\\u524d\\u51fa\\u4ef7\\n\\t * @param tokenId NFT\\u7684Token ID\\n\\t */\\n\\tfunction getCurrentBid(uint256 tokenId) public view returns (uint256) {\\n\\t\\treturn _idToAuction[tokenId].currentBid;\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u83b7\\u53d6NFT\\u7684\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\n\\t * @param tokenId NFT\\u7684Token ID\\n\\t */\\n\\tfunction getHighestBidder(uint256 tokenId) public view returns (address) {\\n\\t\\treturn _idToAuction[tokenId].highestBidder;\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u4ece\\u5e02\\u573a\\u4e2d\\u64a4\\u4e0bNFT\\n\\t * @param tokenId NFT\\u7684Token ID\\n\\t */\\n\\tfunction unlistNft(uint256 tokenId) public {\\n\\t\\trequire(\\n\\t\\t\\townerOf(tokenId) == msg.sender,\\n\\t\\t\\t\\\"Only the owner can unlist the NFT\\\"\\n\\t\\t);\\n\\t\\trequire(_idToNftItem[tokenId].isListed, \\\"NFT is not listed\\\");\\n\\n\\t\\t_removeListedToken(tokenId);\\n\\t\\t_idToNftItem[tokenId].isListed = false;\\n\\n\\t\\temit NftUnlisted(tokenId, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u8d2d\\u4e70NFT\\u5e76\\u652f\\u4ed8\\u7248\\u7a0e\\n\\t * @param tokenId NFT\\u7684Token ID\\n\\t */\\n\\tfunction purchaseNft(uint256 tokenId) public payable nonReentrant {\\n\\t\\tNftItem storage item = _idToNftItem[tokenId];\\n\\t\\trequire(item.isListed, \\\"NFT is not listed for sale\\\");\\n\\t\\trequire(msg.value >= item.price, \\\"Insufficient payment\\\");\\n\\n\\t\\trequire(item.isListed, \\\"NFT is not listed for sale\\\");\\n\\t\\tif (item.expirationTime != 0 && block.timestamp > item.expirationTime) {\\n\\t\\t\\t_removeListedToken(tokenId);\\n\\t\\t\\titem.isListed = false;\\n\\t\\t\\trevert(\\\"NFT listing has expired\\\");\\n\\t\\t}\\n\\n\\t\\taddress seller = item.seller;\\n\\t\\t_removeListedToken(tokenId);\\n\\t\\titem.isListed = false;\\n\\n\\t\\t// \\u83b7\\u53d6\\u7248\\u7a0e\\u4fe1\\u606f\\n\\t\\t(address royaltyReceiver, uint256 royaltyAmount) = royaltyInfo(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tmsg.value\\n\\t\\t);\\n\\n\\t\\t// \\u8ba1\\u7b97\\u4ea4\\u6613\\u8d39\\u7528\\n\\t\\tuint256 listingFee = (msg.value * listingFeePercentage) / 10000;\\n\\t\\ttotalFeesCollected += listingFee;\\n\\n\\t\\t// \\u5411\\u5356\\u5bb6\\u548c\\u7248\\u7a0e\\u63a5\\u6536\\u8005\\u652f\\u4ed8\\n\\t\\tpayable(seller).transfer(msg.value - listingFee - royaltyAmount);\\n\\t\\tpayable(royaltyReceiver).transfer(royaltyAmount);\\n\\n\\t\\t_transfer(seller, msg.sender, tokenId);\\n\\n\\t\\t// \\u8bb0\\u5f55\\u4ea4\\u6613\\u5386\\u53f2\\n\\t\\t_tradeHistories[tokenId].push(\\n\\t\\t\\tTradeHistory({\\n\\t\\t\\t\\tfrom: seller,\\n\\t\\t\\t\\tto: msg.sender,\\n\\t\\t\\t\\tprice: msg.value,\\n\\t\\t\\t\\troyalty: royaltyAmount,\\n\\t\\t\\t\\ttimestamp: block.timestamp\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\temit NftPurchased(tokenId, msg.sender, msg.value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u67e5\\u8be2\\u6307\\u5b9a tokenId \\u7684\\u4ea4\\u6613\\u5386\\u53f2\\n\\t * @param tokenId NFT\\u7684Token ID\\n\\t * @return TradeHistory[] \\u4ea4\\u6613\\u5386\\u53f2\\u7684\\u6570\\u7ec4\\n\\t */\\n\\tfunction getTradeHistory(\\n\\t\\tuint256 tokenId\\n\\t) public view returns (TradeHistory[] memory) {\\n\\t\\treturn _tradeHistories[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u66f4\\u65b0\\u4e0a\\u67b6\\u8d39\\u6bd4\\u4f8b\\n\\t * @param newListingFeePercentage \\u65b0\\u7684\\u4e0a\\u67b6\\u8d39\\u7387\\uff08\\u767e\\u5206\\u6bd4\\u7684\\u5343\\u5206\\u4e4b\\u4e00\\uff09\\n\\t */\\n\\tfunction updateListingFeePercentage(\\n\\t\\tuint256 newListingFeePercentage\\n\\t) public onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tnewListingFeePercentage <= MAX_LISTING_FEE_PERCENTAGE,\\n\\t\\t\\t\\\"Listing fee is too high\\\"\\n\\t\\t);\\n\\t\\tlistingFeePercentage = newListingFeePercentage;\\n\\t\\temit ListingFeePercentageUpdated(newListingFeePercentage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u63d0\\u53d6\\u6536\\u96c6\\u7684\\u4e0a\\u67b6\\u8d39\\u7528\\n\\t */\\n\\tfunction withdrawFees() public onlyOwner {\\n\\t\\tuint256 amount = totalFeesCollected;\\n\\t\\ttotalFeesCollected = 0;\\n\\t\\tpayable(owner()).transfer(amount);\\n\\t\\temit FeesWithdrawn(owner(), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u83b7\\u53d6\\u6240\\u6709\\u4e0a\\u67b6\\u7684NFT\\n\\t * @return An array of NftItem structs\\n\\t */\\n\\tfunction getAllListedNfts() external view returns (NftItem[] memory) {\\n\\t\\tuint256 totalListed = _listedTokenIds.length;\\n\\t\\tNftItem[] memory items = new NftItem[](totalListed);\\n\\t\\tuint256 count = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < totalListed; i++) {\\n\\t\\t\\tuint256 tokenId = _listedTokenIds[i];\\n\\t\\t\\tNftItem storage item = _idToNftItem[tokenId];\\n\\t\\t\\tif (\\n\\t\\t\\t\\titem.isListed &&\\n\\t\\t\\t\\t(item.expirationTime == 0 ||\\n\\t\\t\\t\\t\\tblock.timestamp <= item.expirationTime)\\n\\t\\t\\t) {\\n\\t\\t\\t\\titems[count] = item;\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// \\u7f29\\u51cf\\u6570\\u7ec4\\u5927\\u5c0f\\u5230\\u6709\\u6548\\u6570\\u91cf\\n\\t\\tassembly {\\n\\t\\t\\tmstore(items, count)\\n\\t\\t}\\n\\n\\t\\treturn items;\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\u83b7\\u53d6NftItem\\u4fe1\\u606f\\n\\t * @param tokenId \\u8981\\u67e5\\u8be2\\u7684NFT\\u7684Token ID\\n\\t * @return NftItem\\u7ed3\\u6784\\u4f53\\n\\t */\\n\\tfunction getNftItem(uint256 tokenId) public view returns (NftItem memory) {\\n\\t\\treturn _idToNftItem[tokenId];\\n\\t}\\n\\n\\tfunction _removeListedToken(uint256 tokenId) private {\\n\\t\\trequire(_listedTokenIds.length > 0, \\\"No tokens listed\\\");\\n\\t\\tuint256 index = _tokenIdToListedIndex[tokenId];\\n\\t\\tuint256 lastTokenId = _listedTokenIds[_listedTokenIds.length - 1];\\n\\t\\t_listedTokenIds[index] = lastTokenId;\\n\\t\\t_tokenIdToListedIndex[lastTokenId] = index;\\n\\t\\t_listedTokenIds.pop();\\n\\t}\\n\\n\\t// \\u91cd\\u5199OpenZeppelin\\u7684\\u94a9\\u5b50\\u51fd\\u6570\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 firstTokenId,\\n\\t\\tuint256 batchSize\\n\\t) internal override(ERC721, ERC721Enumerable) {\\n\\t\\tsuper._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Royalty)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.supportsInterface(interfaceId);\\n\\t}\\n\\n\\tfunction _burn(\\n\\t\\tuint256 tokenId\\n\\t) internal override(ERC721, ERC721URIStorage, ERC721Royalty) {\\n\\t\\tsuper._burn(tokenId);\\n\\t}\\n\\n\\tfunction tokenURI(\\n\\t\\tuint256 tokenId\\n\\t) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n\\t\\treturn super.tokenURI(tokenId);\\n\\t}\\n}\\n\",\"keccak256\":\"0x7807dcd2de9ad16560141bf702bcb153779cde8731c8a14aec796b0452afbb58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260fa6017553480156200001657600080fd5b506040518060400160405280600f81526020016e596f7572436f6c6c65637469626c6560881b8152506040518060400160405280600381526020016205a4a560ec1b81525081600290816200006c91906200019e565b5060036200007b82826200019e565b5050506200009862000092620000a360201b60201c565b620000a7565b6001600e556200026a565b3390565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012457607f821691505b6020821081036200014557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200019957600081815260208120601f850160051c81016020861015620001745750805b601f850160051c820191505b81811015620001955782815560010162000180565b5050505b505050565b81516001600160401b03811115620001ba57620001ba620000f9565b620001d281620001cb84546200010f565b846200014b565b602080601f8311600181146200020a5760008415620001f15750858301515b600019600386901b1c1916600185901b17855562000195565b600085815260208120601f198616915b828110156200023b578886015182559484019460019091019084016200021a565b50858210156200025a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b613cfd806200027a6000396000f3fe6080604052600436106102305760003560e01c8063873c5e601161012e578063b88d4fde116100ab578063cda4beef1161006f578063cda4beef146106a5578063da4e364f146106c5578063deb82ed9146106f5578063e985e9c51461070b578063f2fde38b1461075457600080fd5b8063b88d4fde146105ec578063b9a2de3a1461060c578063bfd3e4ba1461062c578063c750cb791461064c578063c87b56dd1461068557600080fd5b80639979ef45116100f25780639979ef45146105645780639d024a7f146105775780639e75689c14610599578063a22cb465146105b9578063a2e66bfc146105d957600080fd5b8063873c5e60146104cb5780638da5cb5b146104f857806395ce4a3b1461051657806395d89b411461053857806398bdf6f51461054d57600080fd5b80632f745c59116101bc57806360c6d8ae1161018057806360c6d8ae146104335780636352211e146104495780636f1a0af51461046957806370a0823114610496578063715018a6146104b657600080fd5b80632f745c591461039e5780633877248d146103be57806342842e0e146103de578063476343ee146103fe5780634f6ccce71461041357600080fd5b80630888de39116102035780630888de39146102e6578063095ea7b31461030a57806318160ddd1461032a57806323b872dd1461033f5780632a55205a1461035f57600080fd5b806301bb8cc51461023557806301ffc9a71461025757806306fdde031461028c578063081812fc146102ae575b600080fd5b34801561024157600080fd5b506102556102503660046133c5565b610774565b005b34801561026357600080fd5b506102776102723660046133f4565b61080e565b60405190151581526020015b60405180910390f35b34801561029857600080fd5b506102a161081f565b6040516102839190613461565b3480156102ba57600080fd5b506102ce6102c93660046133c5565b6108b1565b6040516001600160a01b039091168152602001610283565b3480156102f257600080fd5b506102fc60175481565b604051908152602001610283565b34801561031657600080fd5b50610255610325366004613490565b6108d8565b34801561033657600080fd5b50600a546102fc565b34801561034b57600080fd5b5061025561035a3660046134ba565b6109ed565b34801561036b57600080fd5b5061037f61037a3660046134f6565b610a1e565b604080516001600160a01b039093168352602083019190915201610283565b3480156103aa57600080fd5b506102fc6103b9366004613490565b610aca565b3480156103ca57600080fd5b506102fc6103d93660046135a4565b610b60565b3480156103ea57600080fd5b506102556103f93660046134ba565b610cd7565b34801561040a57600080fd5b50610255610cf2565b34801561041f57600080fd5b506102fc61042e3660046133c5565b610d99565b34801561043f57600080fd5b506102fc60105481565b34801561045557600080fd5b506102ce6104643660046133c5565b610e2c565b34801561047557600080fd5b506104896104843660046133c5565b610e8c565b6040516102839190613681565b3480156104a257600080fd5b506102fc6104b1366004613694565b610f91565b3480156104c257600080fd5b50610255611017565b3480156104d757600080fd5b506104eb6104e63660046133c5565b61102b565b60405161028391906136af565b34801561050457600080fd5b50600d546001600160a01b03166102ce565b34801561052257600080fd5b5061052b6110d7565b6040516102839190613729565b34801561054457600080fd5b506102a16112d1565b34801561055957600080fd5b50600f546102fc9081565b6102556105723660046133c5565b6112e0565b34801561058357600080fd5b5061058c61148e565b604051610283919061378b565b3480156105a557600080fd5b506102556105b43660046133c5565b6116be565b3480156105c557600080fd5b506102556105d4366004613810565b6117d6565b6102556105e73660046133c5565b6117e5565b3480156105f857600080fd5b5061025561060736600461384c565b611b55565b34801561061857600080fd5b506102556106273660046133c5565b611b8d565b34801561063857600080fd5b506102556106473660046138c8565b611d6f565b34801561065857600080fd5b506102ce6106673660046133c5565b6000908152601260205260409020600401546001600160a01b031690565b34801561069157600080fd5b506102a16106a03660046133c5565b611f6d565b3480156106b157600080fd5b506102556106c03660046138c8565b611f78565b3480156106d157600080fd5b506102fc6106e03660046133c5565b60009081526012602052604090206003015490565b34801561070157600080fd5b506102fc6103e881565b34801561071757600080fd5b506102776107263660046138f4565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561076057600080fd5b5061025561076f366004613694565b612223565b61077c612299565b6103e88111156107d35760405162461bcd60e51b815260206004820152601760248201527f4c697374696e672066656520697320746f6f206869676800000000000000000060448201526064015b60405180910390fd5b60178190556040518181527f7b7b531d40c1aa89dac7360f225e5660c63799638af64655583d3ec191be11e29060200160405180910390a150565b6000610819826122f3565b92915050565b60606002805461082e90613927565b80601f016020809104026020016040519081016040528092919081815260200182805461085a90613927565b80156108a75780601f1061087c576101008083540402835291602001916108a7565b820191906000526020600020905b81548152906001019060200180831161088a57829003601f168201915b5050505050905090565b60006108bc826122fe565b506000908152600660205260409020546001600160a01b031690565b60006108e382610e2c565b9050806001600160a01b0316836001600160a01b0316036109505760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107ca565b336001600160a01b038216148061096c575061096c8133610726565b6109de5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016107ca565b6109e8838361235d565b505050565b6109f733826123cb565b610a135760405162461bcd60e51b81526004016107ca90613961565b6109e883838361244a565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610a935750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610ab2906001600160601b0316876139c4565b610abc91906139db565b915196919550909350505050565b6000610ad583610f91565b8210610b375760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016107ca565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b6000610b70600f80546001019055565b6000610b7b600f5490565b9050610b8785826125bb565b610b9181856125d5565b610b9c8133856126a0565b6040516001600160601b0384168152339082907f93c3d3c02f3e5b8ff28a98e2ff5dc3d9395f4f02af3a830c3789c8af254202539060200160405180910390a36000610be66127ae565b85604051602001610bf89291906139fd565b60408051601f1981840301815260c08301825284835260006020848101828152858501838152606087018481526080880186815260a089018690528a86526011909452959093208651815590516001820155915160028301805495511515600160a01b026001600160a81b03199096166001600160a01b0392909216919091179490941790935591519093506003820190610c939082613a7a565b5060a0919091015160049091015560405160009083907f53f405bfea4b68c2f9cbb58bece507b3a7621257eb0c9735ee0626574e5b1488908390a350949350505050565b6109e883838360405180602001604052806000815250611b55565b610cfa612299565b601080546000909155600d546001600160a01b03166001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015610d47573d6000803e3d6000fd5b50600d546001600160a01b03166001600160a01b03167fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a82604051610d8e91815260200190565b60405180910390a250565b6000610da4600a5490565b8210610e075760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016107ca565b600a8281548110610e1a57610e1a613b3a565b90600052602060002001549050919050565b6000818152600460205260408120546001600160a01b0316806108195760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107ca565b610e94613384565b600082815260116020908152604091829020825160c0810184528154815260018201549281019290925260028101546001600160a01b03811693830193909352600160a01b90920460ff1615156060820152600382018054919291608084019190610efe90613927565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2a90613927565b8015610f775780601f10610f4c57610100808354040283529160200191610f77565b820191906000526020600020905b815481529060010190602001808311610f5a57829003601f168201915b505050505081526020016004820154815250509050919050565b60006001600160a01b038216610ffb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107ca565b506001600160a01b031660009081526005602052604090205490565b61101f612299565b61102960006127ce565b565b606060186000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156110cc5760008481526020908190206040805160a0810182526005860290920180546001600160a01b03908116845260018083015490911684860152600282015492840192909252600381015460608401526004015460808301529083529092019101611060565b505050509050919050565b60155460609060008167ffffffffffffffff8111156110f8576110f8613518565b60405190808252806020026020018201604052801561113157816020015b61111e613384565b8152602001906001900390816111165790505b5090506000805b838110156112c85760006015828154811061115557611155613b3a565b60009182526020808320909101548083526011909152604090912060028101549192509060ff600160a01b9091041680156111a05750600481015415806111a0575080600401544211155b156112b3576040805160c081018252825481526001830154602082015260028301546001600160a01b03811692820192909252600160a01b90910460ff1615156060820152600382018054839160808401916111fb90613927565b80601f016020809104026020016040519081016040528092919081815260200182805461122790613927565b80156112745780601f1061124957610100808354040283529160200191611274565b820191906000526020600020905b81548152906001019060200180831161125757829003601f168201915b5050505050815260200160048201548152505085858151811061129957611299613b3a565b602002602001018190525083806112af90613b50565b9450505b505080806112c090613b50565b915050611138565b50815292915050565b60606003805461082e90613927565b6000818152601260205260409020600681015460ff1661133a5760405162461bcd60e51b815260206004820152601560248201527441756374696f6e206973206e6f742061637469766560581b60448201526064016107ca565b806005015442106113815760405162461bcd60e51b8152602060048201526011602482015270105d58dd1a5bdb881a185cc8195b991959607a1b60448201526064016107ca565b806003015434116113e05760405162461bcd60e51b815260206004820152602360248201527f426964206d75737420626520686967686572207468616e2063757272656e7420604482015262189a5960ea1b60648201526084016107ca565b60048101546001600160a01b03161561143557600481015460038201546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015611433573d6000803e3d6000fd5b505b34600382018190556004820180546001600160a01b031916339081179091556040519182529083907f0e54eff26401bf69b81b26f60bd85ef47f5d85275c1d268d84f68d6897431c479060200160405180910390a35050565b60606000805b601354811015611511576000601382815481106114b3576114b3613b3a565b60009182526020808320909101548083526012909152604090912060068101549192509060ff1680156114e95750806005015442105b156114fc57836114f881613b50565b9450505b5050808061150990613b50565b915050611494565b5060008167ffffffffffffffff81111561152d5761152d613518565b6040519080825280602002602001820160405280156115b257816020015b61159f6040518060e001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000151581525090565b81526020019060019003908161154b5790505b5090506000805b6013548110156116b5576000601382815481106115d8576115d8613b3a565b60009182526020808320909101548083526012909152604090912060068101549192509060ff16801561160e5750806005015442105b156116a0576040805160e0810182528254815260018301546001600160a01b0390811660208301526002840154928201929092526003830154606082015260048301549091166080820152600582015460a0820152600682015460ff16151560c0820152855186908690811061168657611686613b3a565b6020026020010181905250838061169c90613b50565b9450505b505080806116ad90613b50565b9150506115b9565b50909392505050565b336116c882610e2c565b6001600160a01b0316146117285760405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920746865206f776e65722063616e20756e6c69737420746865204e466044820152601560fa1b60648201526084016107ca565b600081815260116020526040902060020154600160a01b900460ff166117845760405162461bcd60e51b8152602060048201526011602482015270139195081a5cc81b9bdd081b1a5cdd1959607a1b60448201526064016107ca565b61178d81612820565b600081815260116020526040808220600201805460ff60a01b1916905551339183917f53f405bfea4b68c2f9cbb58bece507b3a7621257eb0c9735ee0626574e5b14889190a350565b6117e1338383612901565b5050565b6117ed6129cf565b60008181526011602052604090206002810154600160a01b900460ff166118565760405162461bcd60e51b815260206004820152601a60248201527f4e4654206973206e6f74206c697374656420666f722073616c6500000000000060448201526064016107ca565b80600101543410156118a15760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016107ca565b6002810154600160a01b900460ff166118fc5760405162461bcd60e51b815260206004820152601a60248201527f4e4654206973206e6f74206c697374656420666f722073616c6500000000000060448201526064016107ca565b6004810154158015906119125750806004015442115b156119775761192082612820565b60028101805460ff60a01b1916905560405162461bcd60e51b815260206004820152601760248201527f4e4654206c697374696e6720686173206578706972656400000000000000000060448201526064016107ca565b60028101546001600160a01b031661198e83612820565b60028201805460ff60a01b191690556000806119aa8534610a1e565b915091506000612710601754346119c191906139c4565b6119cb91906139db565b905080601060008282546119df9190613b69565b90915550506001600160a01b0384166108fc836119fc8434613b7c565b611a069190613b7c565b6040518115909202916000818181858888f19350505050158015611a2e573d6000803e3d6000fd5b506040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015611a65573d6000803e3d6000fd5b50611a7184338861244a565b6000868152601860209081526040808320815160a0810183526001600160a01b0389811682523382860181815234848701818152606086018c81524260808801908152885460018082018b55998d529b8b902097516005909c0290970180549b87166001600160a01b03199c8d16178155935197840180549890961697909a169690961790935593516002850155955160038401559051600490920191909155905190815288917fd1861454b25e248ff1d0dcdafe053c022db01d05d6aa9fd5ab4449bc951fce4d910160405180910390a35050505050611b526001600e55565b50565b611b5f33836123cb565b611b7b5760405162461bcd60e51b81526004016107ca90613961565b611b8784848484612a28565b50505050565b611b956129cf565b6000818152601260205260409020600681015460ff16611bf75760405162461bcd60e51b815260206004820152601960248201527f41756374696f6e2068617320616c726561647920656e6465640000000000000060448201526064016107ca565b60068101805460ff1916905560048101546001600160a01b031615611d2b5760018101546004820154611c37916001600160a01b0390811691168461244a565b600381015460018201546040516000916001600160a01b03169083908381818185875af1925050503d8060008114611c8b576040519150601f19603f3d011682016040523d82523d6000602084013e611c90565b606091505b5050905080611cd95760405162461bcd60e51b815260206004820152601560248201527414d95b1b195c881c185e5b595b9d0819985a5b1959605a1b60448201526064016107ca565b600483015460038401546040519081526001600160a01b039091169085907fd2aa34a4fdbbc6dff6a3e56f46e0f3ae2a31d7785ff3487aa5c95c642acea5019060200160405180910390a35050611d64565b60405160008082529083907fd2aa34a4fdbbc6dff6a3e56f46e0f3ae2a31d7785ff3487aa5c95c642acea5019060200160405180910390a35b50611b526001600e55565b33611d7984610e2c565b6001600160a01b031614611dcf5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920746865206f776e65722063616e206c69737420746865204e46540060448201526064016107ca565b600083815260116020526040902060020154600160a01b900460ff1615611e305760405162461bcd60e51b8152602060048201526015602482015274139195081a5cc8185b1c9958591e481b1a5cdd1959605a1b60448201526064016107ca565b60008211611e805760405162461bcd60e51b815260206004820152601f60248201527f5072696365206d7573742062652067726561746572207468616e207a65726f0060448201526064016107ca565b60008115611e9757611e928242613b69565b611e9a565b60005b6000858152601160205260408120600180820187905560028201805460ff60a01b1933166001600160a81b031990911617600160a01b1790556004909101839055601580548083018255928190527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4759092018790559054919250611f1d91613b7c565b6000858152601660209081526040918290209290925551848152339186917f6decc0edd62bc66dd462d841e96d5888ee2452307a8352b9bd66e442d6a23ee091015b60405180910390a350505050565b606061081982612a5b565b33611f8284610e2c565b6001600160a01b031614611fe45760405162461bcd60e51b8152602060048201526024808201527f4f6e6c7920746865206f776e65722063616e2063726561746520616e206175636044820152633a34b7b760e11b60648201526084016107ca565b60008381526012602052604090206006015460ff16156120465760405162461bcd60e51b815260206004820152601960248201527f41756374696f6e20697320616c7265616479206163746976650000000000000060448201526064016107ca565b600082116120a55760405162461bcd60e51b815260206004820152602660248201527f5374617274696e6720626964206d7573742062652067726561746572207468616044820152656e207a65726f60d01b60648201526084016107ca565b60006120b18242613b69565b90506040518060e00160405280858152602001336001600160a01b031681526020018481526020016000815260200160006001600160a01b0316815260200182815260200160011515815250601260008681526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050506013849080600181540180825580915050600190039060005260206000200160009091909190915055336001600160a01b0316847fc9050d42180a61cb0d9ebb8ad118b62fe6eab12cf12ff752c4a0cc7da9ddf6278584604051611f5f929190918252602082015260400190565b61222b612299565b6001600160a01b0381166122905760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107ca565b611b52816127ce565b600d546001600160a01b031633146110295760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ca565b600061081982612b56565b6000818152600460205260409020546001600160a01b0316611b525760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107ca565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061239282610e2c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806123d783610e2c565b9050806001600160a01b0316846001600160a01b0316148061241e57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b806124425750836001600160a01b0316612437846108b1565b6001600160a01b0316145b949350505050565b826001600160a01b031661245d82610e2c565b6001600160a01b0316146124835760405162461bcd60e51b81526004016107ca90613b8f565b6001600160a01b0382166124e55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107ca565b6124f28383836001612b7b565b826001600160a01b031661250582610e2c565b6001600160a01b03161461252b5760405162461bcd60e51b81526004016107ca90613b8f565b600081815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260058552838620805460001901905590871680865283862080546001019055868652600490945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6117e1828260405180602001604052806000815250612b87565b6000828152600460205260409020546001600160a01b03166126505760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016107ca565b6000828152600c602052604090206126688282613a7a565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6127106001600160601b038216111561270e5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016107ca565b6001600160a01b0382166127645760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016107ca565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b6060604051806060016040528060318152602001613c9760319139905090565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6015546128625760405162461bcd60e51b815260206004820152601060248201526f139bc81d1bdad95b9cc81b1a5cdd195960821b60448201526064016107ca565b6000818152601660205260408120546015805491929161288490600190613b7c565b8154811061289457612894613b3a565b9060005260206000200154905080601583815481106128b5576128b5613b3a565b600091825260208083209091019290925582815260169091526040902082905560158054806128e6576128e6613bd4565b60019003818190600052602060002001600090559055505050565b816001600160a01b0316836001600160a01b0316036129625760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107ca565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6002600e5403612a215760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ca565b6002600e55565b612a3384848461244a565b612a3f84848484612bba565b611b875760405162461bcd60e51b81526004016107ca90613bea565b6060612a66826122fe565b6000828152600c602052604081208054612a7f90613927565b80601f0160208091040260200160405190810160405280929190818152602001828054612aab90613927565b8015612af85780601f10612acd57610100808354040283529160200191612af8565b820191906000526020600020905b815481529060010190602001808311612adb57829003601f168201915b505050505090506000612b096127ae565b90508051600003612b1b575092915050565b815115612b4d578082604051602001612b359291906139fd565b60405160208183030381529060405292505050919050565b61244284612cbb565b60006001600160e01b03198216632483248360e11b1480610819575061081982612d22565b611b8784848484612d47565b612b918383612e7b565b612b9e6000848484612bba565b6109e85760405162461bcd60e51b81526004016107ca90613bea565b60006001600160a01b0384163b15612cb057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612bfe903390899088908890600401613c3c565b6020604051808303816000875af1925050508015612c39575060408051601f3d908101601f19168201909252612c3691810190613c79565b60015b612c96573d808015612c67576040519150601f19603f3d011682016040523d82523d6000602084013e612c6c565b606091505b508051600003612c8e5760405162461bcd60e51b81526004016107ca90613bea565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612442565b506001949350505050565b6060612cc6826122fe565b6000612cd06127ae565b90506000815111612cf05760405180602001604052806000815250612d1b565b80612cfa84613014565b604051602001612d0b9291906139fd565b6040516020818303038152906040525b9392505050565b60006001600160e01b0319821663780e9d6360e01b14806108195750610819826130a7565b6001811115612db65760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016107ca565b816001600160a01b038516612e1257612e0d81600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b612e35565b836001600160a01b0316856001600160a01b031614612e3557612e3585826130e7565b6001600160a01b038416612e5157612e4c81613184565b612e74565b846001600160a01b0316846001600160a01b031614612e7457612e748482613233565b5050505050565b6001600160a01b038216612ed15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107ca565b6000818152600460205260409020546001600160a01b031615612f365760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107ca565b612f44600083836001612b7b565b6000818152600460205260409020546001600160a01b031615612fa95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107ca565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060600061302183613277565b600101905060008167ffffffffffffffff81111561304157613041613518565b6040519080825280601f01601f19166020018201604052801561306b576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461307557509392505050565b60006001600160e01b031982166380ac58cd60e01b14806130d857506001600160e01b03198216635b5e139f60e01b145b8061081957506108198261334f565b600060016130f484610f91565b6130fe9190613b7c565b600083815260096020526040902054909150808214613151576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061319690600190613b7c565b6000838152600b6020526040812054600a80549394509092849081106131be576131be613b3a565b9060005260206000200154905080600a83815481106131df576131df613b3a565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a80548061321757613217613bd4565b6001900381819060005260206000200160009055905550505050565b600061323e83610f91565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106132b65772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106132e2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061330057662386f26fc10000830492506010015b6305f5e1008310613318576305f5e100830492506008015b612710831061332c57612710830492506004015b6064831061333e576064830492506002015b600a83106108195760010192915050565b60006001600160e01b0319821663152a902d60e11b148061081957506301ffc9a760e01b6001600160e01b0319831614610819565b6040518060c00160405280600081526020016000815260200160006001600160a01b0316815260200160001515815260200160608152602001600081525090565b6000602082840312156133d757600080fd5b5035919050565b6001600160e01b031981168114611b5257600080fd5b60006020828403121561340657600080fd5b8135612d1b816133de565b60005b8381101561342c578181015183820152602001613414565b50506000910152565b6000815180845261344d816020860160208601613411565b601f01601f19169290920160200192915050565b602081526000612d1b6020830184613435565b80356001600160a01b038116811461348b57600080fd5b919050565b600080604083850312156134a357600080fd5b6134ac83613474565b946020939093013593505050565b6000806000606084860312156134cf57600080fd5b6134d884613474565b92506134e660208501613474565b9150604084013590509250925092565b6000806040838503121561350957600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561354957613549613518565b604051601f8501601f19908116603f0116810190828211818310171561357157613571613518565b8160405280935085815286868601111561358a57600080fd5b858560208301376000602087830101525050509392505050565b6000806000606084860312156135b957600080fd5b6135c284613474565b9250602084013567ffffffffffffffff8111156135de57600080fd5b8401601f810186136135ef57600080fd5b6135fe8682356020840161352e565b92505060408401356001600160601b038116811461361b57600080fd5b809150509250925092565b805182526020810151602083015260018060a01b0360408201511660408301526060810151151560608301526000608082015160c0608085015261366d60c0850182613435565b60a093840151949093019390935250919050565b602081526000612d1b6020830184613626565b6000602082840312156136a657600080fd5b612d1b82613474565b602080825282518282018190526000919060409081850190868401855b8281101561371c57815180516001600160a01b0390811686528782015116878601528581015186860152606080820151908601526080908101519085015260a090930192908501906001016136cc565b5091979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561377e57603f1988860301845261376c858351613626565b94509285019290850190600101613750565b5092979650505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561371c57815180518552868101516001600160a01b03908116888701528682015187870152606080830151908701526080808301519091169086015260a0808201519086015260c09081015115159085015260e090930192908501906001016137a8565b6000806040838503121561382357600080fd5b61382c83613474565b91506020830135801515811461384157600080fd5b809150509250929050565b6000806000806080858703121561386257600080fd5b61386b85613474565b935061387960208601613474565b925060408501359150606085013567ffffffffffffffff81111561389c57600080fd5b8501601f810187136138ad57600080fd5b6138bc8782356020840161352e565b91505092959194509250565b6000806000606084860312156138dd57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561390757600080fd5b61391083613474565b915061391e60208401613474565b90509250929050565b600181811c9082168061393b57607f821691505b60208210810361395b57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610819576108196139ae565b6000826139f857634e487b7160e01b600052601260045260246000fd5b500490565b60008351613a0f818460208801613411565b835190830190613a23818360208801613411565b01949350505050565b601f8211156109e857600081815260208120601f850160051c81016020861015613a535750805b601f850160051c820191505b81811015613a7257828155600101613a5f565b505050505050565b815167ffffffffffffffff811115613a9457613a94613518565b613aa881613aa28454613927565b84613a2c565b602080601f831160018114613add5760008415613ac55750858301515b600019600386901b1c1916600185901b178555613a72565b600085815260208120601f198616915b82811015613b0c57888601518255948401946001909101908401613aed565b5085821015613b2a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201613b6257613b626139ae565b5060010190565b80820180821115610819576108196139ae565b81810381811115610819576108196139ae565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b634e487b7160e01b600052603160045260246000fd5b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613c6f90830184613435565b9695505050505050565b600060208284031215613c8b57600080fd5b8151612d1b816133de56fe68747470733a2f2f6c696d652d72616e646f6d2d6d6974652d3536332e6d7970696e6174612e636c6f75642f697066732fa2646970667358221220f376962bbf8138f9f947b63df3446fb9dc6c546d25f4633bbee84d897e00e8d864736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "createAuction(uint256,uint256,uint256)": {
        "details": "创建拍卖",
        "params": {
          "duration": "拍卖持续时间（秒）",
          "startingBid": "拍卖的起始价格",
          "tokenId": "NFT的Token ID"
        }
      },
      "endAuction(uint256)": {
        "details": "结束拍卖   ",
        "params": {
          "tokenId": "NFT的Token ID"
        }
      },
      "getAllListedNfts()": {
        "details": "获取所有上架的NFT",
        "returns": {
          "_0": "An array of NftItem structs"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getCurrentBid(uint256)": {
        "details": "获取NFT的当前出价",
        "params": {
          "tokenId": "NFT的Token ID"
        }
      },
      "getHighestBidder(uint256)": {
        "details": "获取NFT的最高出价者",
        "params": {
          "tokenId": "NFT的Token ID"
        }
      },
      "getNftItem(uint256)": {
        "details": "获取NftItem信息",
        "params": {
          "tokenId": "要查询的NFT的Token ID"
        },
        "returns": {
          "_0": "NftItem结构体"
        }
      },
      "getTradeHistory(uint256)": {
        "details": "查询指定 tokenId 的交易历史",
        "params": {
          "tokenId": "NFT的Token ID"
        },
        "returns": {
          "_0": "TradeHistory[] 交易历史的数组"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintItem(address,string,uint96)": {
        "details": "铸造新的NFT并设置版税，铸造者为版税接收者",
        "params": {
          "feeNumerator": "版税比例（百分比的千分之一），如500表示5%",
          "to": "接收者地址",
          "uri": "NFT的元数据URI"
        },
        "returns": {
          "_0": "tokenId 新铸造的NFT的Token ID"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "placeBid(uint256)": {
        "details": "出价",
        "params": {
          "tokenId": "NFT的Token ID"
        }
      },
      "placeNftOnSale(uint256,uint256,uint256)": {
        "details": "上架NFT，设置价格并记录卖家信息",
        "params": {
          "duration": "上架持续时间（秒），0 表示无限期",
          "price": "上架的价格",
          "tokenId": "NFT的Token ID"
        }
      },
      "purchaseNft(uint256)": {
        "details": "购买NFT并支付版税",
        "params": {
          "tokenId": "NFT的Token ID"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlistNft(uint256)": {
        "details": "从市场中撤下NFT",
        "params": {
          "tokenId": "NFT的Token ID"
        }
      },
      "updateListingFeePercentage(uint256)": {
        "details": "更新上架费比例",
        "params": {
          "newListingFeePercentage": "新的上架费率（百分比的千分之一）"
        }
      },
      "withdrawFees()": {
        "details": "提取收集的上架费用"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1916,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)1913_storage"
      },
      {
        "astId": 1921,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1913_storage)"
      },
      {
        "astId": 250,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 252,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 256,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 260,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 264,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 270,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1300,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1304,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1307,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1311,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1701,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owner",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 170,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_status",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3795,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Counter)2463_storage"
      },
      {
        "astId": 3797,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "totalFeesCollected",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3841,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_idToNftItem",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(NftItem)3810_storage)"
      },
      {
        "astId": 3846,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_idToAuction",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(Auction)3825_storage)"
      },
      {
        "astId": 3849,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_auctionedTokenIds",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3853,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_usedTokenURIs",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 3856,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_listedTokenIds",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3860,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenIdToListedIndex",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3863,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "listingFeePercentage",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 3872,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tradeHistories",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_array(t_struct(TradeHistory)3836_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TradeHistory)3836_storage)dyn_storage": {
        "base": "t_struct(TradeHistory)3836_storage",
        "encoding": "dynamic_array",
        "label": "struct YourCollectible.TradeHistory[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(TradeHistory)3836_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.TradeHistory[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TradeHistory)3836_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Auction)3825_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)3825_storage"
      },
      "t_mapping(t_uint256,t_struct(NftItem)3810_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.NftItem)",
        "numberOfBytes": "32",
        "value": "t_struct(NftItem)3810_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1913_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1913_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auction)3825_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.Auction",
        "members": [
          {
            "astId": 3812,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3814,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 3816,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "startingBid",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3818,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "currentBid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3820,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "highestBidder",
            "offset": 0,
            "slot": "4",
            "type": "t_address_payable"
          },
          {
            "astId": 3822,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "endTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3824,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isActive",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Counter)2463_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2462,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NftItem)3810_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.NftItem",
        "members": [
          {
            "astId": 3799,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3801,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3803,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 3805,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isListed",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 3807,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenUri",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3809,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "expirationTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoyaltyInfo)1913_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1910,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1912,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TradeHistory)3836_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.TradeHistory",
        "members": [
          {
            "astId": 3827,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3829,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3831,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3833,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "royalty",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3835,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}